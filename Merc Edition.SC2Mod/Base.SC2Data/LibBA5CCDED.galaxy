include "TriggerLibs/NativeLib"
include "TriggerLibs/CampaignLib"

include "LibBA5CCDED_h"

//--------------------------------------------------------------------------------------------------
// Library: Merc Edition Data
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libBA5CCDED_InitLibraries () {
    libNtve_InitVariables();
    libCamp_InitVariables();
}

// Functions
void libBA5CCDED_gf_Taldarimify (playergroup lp_players) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoBB968618_g;

    // Variable Initialization

    // Implementation
    autoBB968618_g = lp_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoBB968618_g, lv_player);
        if (lv_player < 0) { break; }
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ColossusTal", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "NexusForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "GatewayForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "DarkShrineForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "FleetBeaconForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "StargateForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "TwilightCouncilForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "RoboticsBayForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "RoboticsFacilityForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "AssimilatorForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "TemplarArchiveForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "CyberneticsCoreForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ShieldBatteryForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "PhotonCannonForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ForgeForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "PylonForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ZealotTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "WarpPrismTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "VoidRayTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "StalkerTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "SentryTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ProbeTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "PhoenixTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ObserverTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "MothershipTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ImmortalTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "HighTemplarTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "DarkTemplarTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "CarrierTaldarim", true);
        PlayerSetColorIndex(lv_player, 1, true);
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Init
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_Init_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    TriggerExecute(libBA5CCDED_gt_InitUnitReplace, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(libBA5CCDED_gt_InitACVMultibuild, true, false);
    TriggerExecute(libBA5CCDED_gt_InitMercEditionUpgrade, true, false);
    TriggerExecute(libBA5CCDED_gt_InitPassiveUpgrades, true, false);
    TriggerExecute(libBA5CCDED_gt_InitAllowingUnits, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_Init_Init () {
    libBA5CCDED_gt_Init = TriggerCreate("libBA5CCDED_gt_Init_Func");
    TriggerAddEventMapInit(libBA5CCDED_gt_Init);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init...ACV Multibuild
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_InitACVMultibuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_BA5CCDED_3BD21F4E"), true);
    Wait(1.0, c_timeGame);
    if ((TechTreeUpgradeCount(1, "MicroFusionReactor", c_techCountCompleteOnly) == 1)) {
        TechTreeAbilityAllow(1, AbilityCommand("AdvancedConstruction", 1), true);
        TechTreeAbilityAllow(1, AbilityCommand("AdvancedConstruction", 0), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_InitACVMultibuild_Init () {
    libBA5CCDED_gt_InitACVMultibuild = TriggerCreate("libBA5CCDED_gt_InitACVMultibuild_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init...Allowing Units
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_InitAllowingUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_BA5CCDED_49305883"), true);
    if ((TechTreeUnitIsAllowed(1, "Bunker") == true)) {
        TechTreeUnitAllow(1, "NaniteCloudEmitter", true);
        TechTreeUnitAllow(1, "NaniteCloudEmitterBurrowed", true);
    }

    if ((TechTreeUnitIsAllowed(1, "Bunker") == true)) {
        TechTreeUnitAllow(1, "BunkerBurrowed", true);
    }

    if ((TechTreeUnitIsAllowed(1, "SCV") == true)) {
        TechTreeUnitAllow(1, "ACV", true);
    }

    if ((TechTreeUnitIsAllowed(1, "Marine") == true)) {
        TechTreeUnitAllow(1, "WarPig", true);
    }

    if ((TechTreeUnitIsAllowed(1, "Marauder") == true)) {
        TechTreeUnitAllow(1, "HammerSecurity", true);
    }

    if ((TechTreeUnitIsAllowed(1, "Medic") == true)) {
        TechTreeUnitAllow(1, "MercMedic", true);
    }

    if ((TechTreeUnitIsAllowed(1, "Firebat") == true)) {
        TechTreeUnitAllow(1, "DevilDog", true);
    }

    if ((TechTreeUnitIsAllowed(1, "Reaper") == true)) {
        TechTreeUnitAllow(1, "BlockB", true);
    }

    if ((TechTreeUnitIsAllowed(1, "Ghost") == true)) {
        TechTreeUnitAllow(1, "Phantom", true);
    }

    if ((TechTreeUnitIsAllowed(1, "Spectre") == true)) {
        TechTreeUnitAllow(1, "Shadow", true);
    }

    if ((TechTreeUnitIsAllowed(1, "Hellion") == true)) {
        TechTreeUnitAllow(1, "Agitator", true);
        TechTreeUnitAllow(1, "Anarchist", true);
    }

    if (((TechTreeUnitIsAllowed(1, "SiegeTank") == true) || (TechTreeUnitIsAllowed(1, "SiegeTankSieged") == true))) {
        TechTreeUnitAllow(1, "SiegeBreakerSieged", true);
        TechTreeUnitAllow(1, "SiegeBreaker", true);
    }

    if ((TechTreeUnitIsAllowed(1, "Goliath") == true)) {
        TechTreeUnitAllow(1, "SpartanCompany", true);
    }

    if (((TechTreeUnitIsAllowed(1, "Thor") == true) || (TechTreeUnitIsAllowed(1, "ThorAP") == true))) {
        TechTreeUnitAllow(1, "Titan", true);
    }

    if ((TechTreeUnitIsAllowed(1, "Vulture") == true)) {
        TechTreeUnitAllow(1, "Condor", true);
    }

    if ((TechTreeUnitIsAllowed(1, "Diamondback") == true)) {
        TechTreeUnitAllow(1, "Copperhead", true);
    }

    if (((TechTreeUnitIsAllowed(1, "VikingAssault") == true) || (TechTreeUnitIsAllowed(1, "VikingFighter") == true))) {
        TechTreeUnitAllow(1, "HelsAngelAssault", true);
        TechTreeUnitAllow(1, "HelsAngelFighter", true);
    }

    if ((TechTreeUnitIsAllowed(1, "Banshee") == true)) {
        TechTreeUnitAllow(1, "DuskWing", true);
    }

    if ((TechTreeUnitIsAllowed(1, "Medivac") == true)) {
        TechTreeUnitAllow(1, "CharonDropship", true);
    }

    if ((TechTreeUnitIsAllowed(1, "Harrier") == true)) {
        TechTreeUnitAllow(1, "Harrier", true);
    }

    if ((TechTreeUnitIsAllowed(1, "Battlecruiser") == true)) {
        TechTreeUnitAllow(1, "Starcruiser", true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_InitAllowingUnits_Init () {
    libBA5CCDED_gt_InitAllowingUnits = TriggerCreate("libBA5CCDED_gt_InitAllowingUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init...Merc Edition Upgrade
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_InitMercEditionUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_BA5CCDED_6D5A7B80"), true);
    TechTreeUpgradeAddLevel(1, "MercEdition", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_InitMercEditionUpgrade_Init () {
    libBA5CCDED_gt_InitMercEditionUpgrade = TriggerCreate("libBA5CCDED_gt_InitMercEditionUpgrade_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init...Passive Upgrades
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_InitPassiveUpgrades_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_BA5CCDED_37EA2574"), true);
    TechTreeUpgradeAddLevel(1, "LaserTargetingSystem", 1);
    TechTreeUpgradeAddLevel(1, "ImpalerRoundsShadow", 1);
    TechTreeUpgradeAddLevel(1, "AdvancedSiegeTechArmorOnly", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_InitPassiveUpgrades_Init () {
    libBA5CCDED_gt_InitPassiveUpgrades = TriggerCreate("libBA5CCDED_gt_InitPassiveUpgrades_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init...Unit Replace
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_InitUnitReplace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5694256B_g;
    int auto5694256B_u;
    unit auto5694256B_var;
    string autoF1BE7618_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_BA5CCDED_C69916B1"), true);
    auto5694256B_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32))), 0);
    auto5694256B_u = UnitGroupCount(auto5694256B_g, c_unitCountAll);
    for (;; auto5694256B_u -= 1) {
        auto5694256B_var = UnitGroupUnitFromEnd(auto5694256B_g, auto5694256B_u);
        if (auto5694256B_var == null) { break; }
        autoF1BE7618_val = UnitGetType(auto5694256B_var);
        if (autoF1BE7618_val == "SCV") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "ACV", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Marine") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "WarPig", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Marauder") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "HammerSecurity", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Medic") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "MercMedic", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Reaper") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "BlockB", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Firebat") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "DevilDog", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Ghost") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Phantom", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Spectre") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Shadow", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "HellionTank") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Anarchist", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Hellion") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Agitator", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "SiegeTankSieged") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "SiegeBreakerSieged", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "SiegeTank") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "SiegeBreaker", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Thor") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Titan", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "ThorAP") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Titan", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Vulture") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Condor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Diamondback") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Copperhead", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Goliath") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "SpartanCompany", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "VikingAssault") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "HelsAngelAssault", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "VikingFighter") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "HelsAngelFighter", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Banshee") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "DuskWing", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Wraith") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Harrier", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Raven") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Nomad", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Hercules") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "ZeusLanderFlying", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "ScienceVessel") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Adjudicator", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Battlecruiser") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Starcruiser", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Medivac") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "CharonDropship", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_InitUnitReplace_Init () {
    libBA5CCDED_gt_InitUnitReplace = TriggerCreate("libBA5CCDED_gt_InitUnitReplace_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mission Directives
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_MissionDirectives_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto8C0CF512_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto8C0CF512_val = libCamp_gf_CurrentMap();
    if (auto8C0CF512_val == libCamp_ge_MapID_MapTRaynor01) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_1CB39EC9"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTRaynor02) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_D6B76FD5"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTRaynor03) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_17EC5578"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTHanson01) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_7141E8B8"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTHanson02) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_127D95BD"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTHanson03A) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_EA0B8EF6"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTHanson03B) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_07E491EB"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTTosh01) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_E21786FD"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTTosh02) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_25C3C5EB"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTTosh03A) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_E10E7623"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTTosh03B) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_ECC6F2CE"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTZeratul01) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_7175B180"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTZeratul02) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_6FD51BF1"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTZeratul03) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_28C51485"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTZeratul04) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_C74680EB"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTValerian01) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_D2BA4636"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTValerian02A) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_21BADA4C"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTValerian02B) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_8B3D9D37"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTTychus01) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_5DAFE497"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTTychus02) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_FA6B9BAB"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTTychus03) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_E07FBC4A"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTTychus04) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_B43DDBEC"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTTychus05) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_D8119886"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTHorner01) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_E8245A9A"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTHorner02) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_A54710E3"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTHorner03) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_31446809"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTHorner04) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_DAFDAB1B"));
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTHorner05S) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_BA5CCDED_D1EDBD39"));
    }
    else {
    }
    Wait(15.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_MissionDirectives_Init () {
    libBA5CCDED_gt_MissionDirectives = TriggerCreate("libBA5CCDED_gt_MissionDirectives_Func");
    TriggerAddEventTimeElapsed(libBA5CCDED_gt_MissionDirectives, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deposit Money
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_DepositMoney_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto885A3E0A_g;
    int auto885A3E0A_u;
    unit auto885A3E0A_var;

    // Conditions
    if (testConds) {
        if (!((libCamp_gf_CurrentMap() != libCamp_ge_MapID_MapTTosh01))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto885A3E0A_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto885A3E0A_u = UnitGroupCount(auto885A3E0A_g, c_unitCountAll);
    for (;; auto885A3E0A_u -= 1) {
        auto885A3E0A_var = UnitGroupUnitFromEnd(auto885A3E0A_g, auto885A3E0A_u);
        if (auto885A3E0A_var == null) { break; }
        UnitSetPropertyFixed(auto885A3E0A_var, c_unitPropResources, 5000.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_DepositMoney_Init () {
    libBA5CCDED_gt_DepositMoney = TriggerCreate("libBA5CCDED_gt_DepositMoney_Func");
    TriggerAddEventTimeElapsed(libBA5CCDED_gt_DepositMoney, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Block B Fly Heighter
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_BlockBFlyHeighter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeReal);
    UnitSetHeight(EventUnit(), 3.75, 0.4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_BlockBFlyHeighter_Init () {
    libBA5CCDED_gt_BlockBFlyHeighter = TriggerCreate("libBA5CCDED_gt_BlockBFlyHeighter_Func");
    TriggerAddEventUnitAbility(libBA5CCDED_gt_BlockBFlyHeighter, null, AbilityCommand("JetPackOverdrive", 0), c_abilMorphStageWait, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Block B Fly Heighter 2
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_BlockBFlyHeighter2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeReal);
    UnitSetHeight(EventUnit(), 0.5, 0.4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_BlockBFlyHeighter2_Init () {
    libBA5CCDED_gt_BlockBFlyHeighter2 = TriggerCreate("libBA5CCDED_gt_BlockBFlyHeighter2_Func");
    TriggerAddEventUnitAbility(libBA5CCDED_gt_BlockBFlyHeighter2, null, AbilityCommand("JetPackOverdriveUndo", 0), c_abilMorphStageWait, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spartan Company Shell Shower Full
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_SpartanCompanyShellShowerFull_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventUnit(), "ShellShower") == 12))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "SpartanCompanyShellShowerFull", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_SpartanCompanyShellShowerFull_Init () {
    libBA5CCDED_gt_SpartanCompanyShellShowerFull = TriggerCreate("libBA5CCDED_gt_SpartanCompanyShellShowerFull_Func");
    TriggerAddEventUnitBehaviorChange(libBA5CCDED_gt_SpartanCompanyShellShowerFull, null, "ShellShower", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Siege Breaker Graduating Range
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_SiegeBreakerGraduatingRange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(1, "SmartServosMKIV", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "GraduatingRangeController", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_SiegeBreakerGraduatingRange_Init () {
    libBA5CCDED_gt_SiegeBreakerGraduatingRange = TriggerCreate("libBA5CCDED_gt_SiegeBreakerGraduatingRange_Func");
    TriggerAddEventUnitAbility(libBA5CCDED_gt_SiegeBreakerGraduatingRange, null, AbilityCommand("SiegeBreakerSiege", 0), c_abilMorphStageAbilsEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Skibi's Angel Repair Drone
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_SkibisAngelRepairDrone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "AIEnhancement", c_techCountCompleteOnly) == 1)) {
        UnitAbilityAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SkibisAngelRepairDrone");
    }
    else {
        if ((GameIsTestMap(false) == false)) {
            TriggerEnable(TriggerGetCurrent(), false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_SkibisAngelRepairDrone_Init () {
    libBA5CCDED_gt_SkibisAngelRepairDrone = TriggerCreate("libBA5CCDED_gt_SkibisAngelRepairDrone_Func");
    TriggerAddEventPlayerEffectUsed(libBA5CCDED_gt_SkibisAngelRepairDrone, c_playerAny, "SkibisAngelSpawnDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hel's Angel Tactical Realignment
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_HelsAngelTacticalRealignment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("TacticalRealignment", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_HelsAngelTacticalRealignment_Init () {
    libBA5CCDED_gt_HelsAngelTacticalRealignment = TriggerCreate("libBA5CCDED_gt_HelsAngelTacticalRealignment_Func");
    TriggerAddEventUnitAbility(libBA5CCDED_gt_HelsAngelTacticalRealignment, null, AbilityCommand("WreckingCrewAssaultMode", 0), c_abilMorphStageStatsEnd, false);
    TriggerAddEventUnitAbility(libBA5CCDED_gt_HelsAngelTacticalRealignment, null, AbilityCommand("WreckingCrewFighterMode", 0), c_abilMorphStageStatsEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Harrier Recall
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_HarrierRecall_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RevivalFieldCooldown") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RevivalFieldCooldown", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    UnitSetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster), UnitGetPosition(UnitGroupClosestToPoint(UnitGroup("Starport", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)))), false);
    UnitAbilitySpendExplicit(EventPlayerEffectUsedUnit(c_effectUnitCaster), AbilityCommand("RevivalField", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_HarrierRecall_Init () {
    libBA5CCDED_gt_HarrierRecall = TriggerCreate("libBA5CCDED_gt_HarrierRecall_Func");
    TriggerAddEventPlayerEffectUsed(libBA5CCDED_gt_HarrierRecall, c_playerAny, "HarrierRecall");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nomad Silent Mode Height Up
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_NomadSilentModeHeightUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), (UnitGetHeight(EventUnit()) + 1.5), 1.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_NomadSilentModeHeightUp_Init () {
    libBA5CCDED_gt_NomadSilentModeHeightUp = TriggerCreate("libBA5CCDED_gt_NomadSilentModeHeightUp_Func");
    TriggerAddEventUnitBehaviorChange(libBA5CCDED_gt_NomadSilentModeHeightUp, null, "NomadSilentMode", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nomad Silent Mode Height Down
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_NomadSilentModeHeightDown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), (UnitGetHeight(EventUnit()) - 1.5), 1.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_NomadSilentModeHeightDown_Init () {
    libBA5CCDED_gt_NomadSilentModeHeightDown = TriggerCreate("libBA5CCDED_gt_NomadSilentModeHeightDown_Func");
    TriggerAddEventUnitBehaviorChange(libBA5CCDED_gt_NomadSilentModeHeightDown, null, "NomadSilentMode", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Samson(Zeus) Injection Pods
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_SamsonZeusInjectionPods_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "ZeusLanderFlying") || (UnitGetType(EventUnit()) == "ZeusLanderLanded")))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(EventPlayer(), "ApolloInjectionPods", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnitCargo(), "SurvivorsGuiltApolloApplyBehavior", EventUnitCargo());
    UnitBehaviorAdd(EventUnitCargo(), "SurvivorsGuiltApolloCD", EventUnitCargo(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_SamsonZeusInjectionPods_Init () {
    libBA5CCDED_gt_SamsonZeusInjectionPods = TriggerCreate("libBA5CCDED_gt_SamsonZeusInjectionPods_Func");
    TriggerAddEventUnitCargo(libBA5CCDED_gt_SamsonZeusInjectionPods, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nanite Emitter Burrow
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_NaniteEmitterBurrow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroupAlliance(EventPlayer(), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitCaster), Order(AbilityCommand("NaniteCloudEmitterBurrow", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_NaniteEmitterBurrow_Init () {
    libBA5CCDED_gt_NaniteEmitterBurrow = TriggerCreate("libBA5CCDED_gt_NaniteEmitterBurrow_Func");
    TriggerAddEventPlayerEffectUsed(libBA5CCDED_gt_NaniteEmitterBurrow, c_playerAny, "NaniteTurretBurrowOrder");
}

void libBA5CCDED_InitTriggers () {
    libBA5CCDED_gt_Init_Init();
    libBA5CCDED_gt_InitACVMultibuild_Init();
    libBA5CCDED_gt_InitAllowingUnits_Init();
    libBA5CCDED_gt_InitMercEditionUpgrade_Init();
    libBA5CCDED_gt_InitPassiveUpgrades_Init();
    libBA5CCDED_gt_InitUnitReplace_Init();
    libBA5CCDED_gt_MissionDirectives_Init();
    libBA5CCDED_gt_DepositMoney_Init();
    libBA5CCDED_gt_BlockBFlyHeighter_Init();
    libBA5CCDED_gt_BlockBFlyHeighter2_Init();
    libBA5CCDED_gt_SpartanCompanyShellShowerFull_Init();
    libBA5CCDED_gt_SiegeBreakerGraduatingRange_Init();
    libBA5CCDED_gt_SkibisAngelRepairDrone_Init();
    libBA5CCDED_gt_HelsAngelTacticalRealignment_Init();
    libBA5CCDED_gt_HarrierRecall_Init();
    libBA5CCDED_gt_NomadSilentModeHeightUp_Init();
    libBA5CCDED_gt_NomadSilentModeHeightDown_Init();
    libBA5CCDED_gt_SamsonZeusInjectionPods_Init();
    libBA5CCDED_gt_NaniteEmitterBurrow_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_InitLib_completed = false;

void libBA5CCDED_InitLib () {
    if (libBA5CCDED_InitLib_completed) {
        return;
    }

    libBA5CCDED_InitLib_completed = true;

    libBA5CCDED_InitLibraries();
    libBA5CCDED_InitTriggers();
}

