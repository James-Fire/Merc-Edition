include "TriggerLibs/NativeLib"
include "TriggerLibs/CampaignLib"
include "LibDAB75013"

include "LibBA5CCDED_h"

//--------------------------------------------------------------------------------------------------
// Library: Merc Edition Data
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libBA5CCDED_InitLibraries () {
    libNtve_InitVariables();
    libCamp_InitVariables();
    libDAB75013_InitVariables();
}

// Variable Initialization
bool libBA5CCDED_InitVariables_completed = false;

void libBA5CCDED_InitVariables () {
    if (libBA5CCDED_InitVariables_completed) {
        return;
    }

    libBA5CCDED_InitVariables_completed = true;

    libBA5CCDED_gv_eventString = "";
}

// Functions
trigger auto_libBA5CCDED_gf_SpawnZeusonGameStart_Trigger = null;
point auto_libBA5CCDED_gf_SpawnZeusonGameStart_lp_spawnPosition;

void libBA5CCDED_gf_SpawnZeusonGameStart (point lp_spawnPosition) {
    auto_libBA5CCDED_gf_SpawnZeusonGameStart_lp_spawnPosition = lp_spawnPosition;

    if (auto_libBA5CCDED_gf_SpawnZeusonGameStart_Trigger == null) {
        auto_libBA5CCDED_gf_SpawnZeusonGameStart_Trigger = TriggerCreate("auto_libBA5CCDED_gf_SpawnZeusonGameStart_TriggerFunc");
    }

    TriggerExecute(auto_libBA5CCDED_gf_SpawnZeusonGameStart_Trigger, false, false);
}

bool auto_libBA5CCDED_gf_SpawnZeusonGameStart_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnPosition = auto_libBA5CCDED_gf_SpawnZeusonGameStart_lp_spawnPosition;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_spawnPosition == null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(libBA5CCDED_gv_zeusCount, "ARESWarbotMercMod", 0, 1, PlayerStartLocation(1));
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(libBA5CCDED_gv_zeusCount, "ARESWarbotMercMod", 0, 1, lp_spawnPosition);
    }
    return true;
}

trigger auto_libBA5CCDED_gf_RescueZeus_Trigger = null;
unit auto_libBA5CCDED_gf_RescueZeus_lp_zeus;

void libBA5CCDED_gf_RescueZeus (unit lp_zeus) {
    auto_libBA5CCDED_gf_RescueZeus_lp_zeus = lp_zeus;

    if (auto_libBA5CCDED_gf_RescueZeus_Trigger == null) {
        auto_libBA5CCDED_gf_RescueZeus_Trigger = TriggerCreate("auto_libBA5CCDED_gf_RescueZeus_TriggerFunc");
    }

    TriggerExecute(auto_libBA5CCDED_gf_RescueZeus_Trigger, false, false);
}

bool auto_libBA5CCDED_gf_RescueZeus_TriggerFunc (bool testConds, bool runActions) {
    unit lp_zeus = auto_libBA5CCDED_gf_RescueZeus_lp_zeus;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_RescueUnit(lp_zeus, 1, true);
    libBA5CCDED_gv_zeusCount += 1;
    return true;
}

trigger auto_libBA5CCDED_gf_WillEmail_Trigger = null;
text auto_libBA5CCDED_gf_WillEmail_lp_emailText;

void libBA5CCDED_gf_WillEmail (text lp_emailText) {
    auto_libBA5CCDED_gf_WillEmail_lp_emailText = lp_emailText;

    if (auto_libBA5CCDED_gf_WillEmail_Trigger == null) {
        auto_libBA5CCDED_gf_WillEmail_Trigger = TriggerCreate("auto_libBA5CCDED_gf_WillEmail_TriggerFunc");
    }

    TriggerExecute(auto_libBA5CCDED_gf_WillEmail_Trigger, false, false);
}

bool auto_libBA5CCDED_gf_WillEmail_TriggerFunc (bool testConds, bool runActions) {
    text lp_emailText = auto_libBA5CCDED_gf_WillEmail_lp_emailText;

    // Automatic Variable Declarations
    // Implementation
    libDAB75013_gf_ServicesEmailShow(StringToText("Will"), (lp_emailText + StringExternal("Param/Value/lib_BA5CCDED_3E1626F0")), 17);
    return true;
}

void libBA5CCDED_gf_Taldarimify (playergroup lp_players) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoBB968618_g;

    // Variable Initialization

    // Implementation
    autoBB968618_g = lp_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoBB968618_g, lv_player);
        if (lv_player < 0) { break; }
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ColossusTal", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "NexusForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "GatewayForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "DarkShrineForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "FleetBeaconForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "StargateForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "TwilightCouncilForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "RoboticsBayForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "RoboticsFacilityForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "AssimilatorForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "TemplarArchiveForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "CyberneticsCoreForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ShieldBatteryForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "PhotonCannonForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ForgeForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "PylonForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ZealotTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "WarpPrismTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "VoidRayTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "StalkerTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "SentryTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ProbeTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "PhoenixTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ObserverTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "MothershipTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ImmortalTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "HighTemplarTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "DarkTemplarTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "CarrierTaldarim", true);
        PlayerSetColorIndex(lv_player, 1, true);
    }
}

void libBA5CCDED_gf_Ihanriiify (playergroup lp_players) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoD294CB1D_g;

    // Variable Initialization

    // Implementation
    autoD294CB1D_g = lp_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoD294CB1D_g, lv_player);
        if (lv_player < 0) { break; }
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "StalkerIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "VoidRayIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "SentryIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "WarpPrismIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ZealotIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "NexusIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "AssimilatorIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "PylonIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "TwilightCouncilIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ProbeIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "PhoenixIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "OracleIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "FleetBeaconIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ImmortalIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "MothershipIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "TemplarArchiveIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ObserverIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "DarkShrineIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "StargateIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "GatewayIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "TempestIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "PhotonCannonIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "AdeptIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "CarrierIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ColossusIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "DarkTemplarIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ShieldBatteryIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "CyberneticsCoreIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "RoboticsFacilityIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "RoboticsFacilityIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "DisruptorIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ForgeIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "RoboticsBayIhanrii", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "HighTemplarIhanrii", true);
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Open Banks
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_OpenBanks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BankLoad("VanillaPlusWOL", 1);
    libBA5CCDED_gv_eventBank = BankLastCreated();
    libBA5CCDED_gv_zeusCount = BankValueGetAsInt(libBA5CCDED_gv_eventBank, "Persistent Units", "ZeusCount");
    libBA5CCDED_gv_genericDifficulty = BankValueGetAsFlag(libBA5CCDED_gv_eventBank, "Settings", "GenericDifficulty");
    if ((libBA5CCDED_gv_genericDifficulty == true)) {
        TriggerExecute(libBA5CCDED_gt_ProtossGenericDifficulty, true, false);
        TriggerEnable(libBA5CCDED_gt_ZergTerranGenericDifficulty, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_OpenBanks_Init () {
    libBA5CCDED_gt_OpenBanks = TriggerCreate("libBA5CCDED_gt_OpenBanks_Func");
    TriggerAddEventMapInit(libBA5CCDED_gt_OpenBanks);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Save Banks
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_SaveBanks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BankValueSetFromInt(libBA5CCDED_gv_eventBank, "Persistent Units", "ZeusCount", libBA5CCDED_gv_zeusCount);
    BankValueSetFromFlag(libBA5CCDED_gv_eventBank, "Settings", "GenericDifficulty", libBA5CCDED_gv_genericDifficulty);
    BankSave(libBA5CCDED_gv_eventBank);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_SaveBanks_Init () {
    libBA5CCDED_gt_SaveBanks = TriggerCreate("libBA5CCDED_gt_SaveBanks_Func");
    TriggerAddEventPlayerLeft(libBA5CCDED_gt_SaveBanks, c_playerAny, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Listen for Chat
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_ListenforChat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libBA5CCDED_gv_genericDifficulty == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_BA5CCDED_738A24E9"), true);
        libBA5CCDED_gv_genericDifficulty = false;
        TriggerEnable(libBA5CCDED_gt_ZergTerranGenericDifficulty, false);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_BA5CCDED_F7435DD6"), true);
        libBA5CCDED_gv_genericDifficulty = true;
        TriggerExecute(libBA5CCDED_gt_ProtossGenericDifficulty, true, false);
        TriggerEnable(libBA5CCDED_gt_ZergTerranGenericDifficulty, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_ListenforChat_Init () {
    libBA5CCDED_gt_ListenforChat = TriggerCreate("libBA5CCDED_gt_ListenforChat_Func");
    TriggerAddEventChatMessage(libBA5CCDED_gt_ListenforChat, c_playerAny, "GenericDifficulty", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_Init_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    TriggerExecute(libBA5CCDED_gt_InitUnitReplace, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(libBA5CCDED_gt_InitACVMultibuild, true, false);
    TriggerExecute(libBA5CCDED_gt_InitMercEditionUpgrade, true, false);
    TriggerExecute(libBA5CCDED_gt_InitPassiveUpgrades, true, false);
    TriggerExecute(libBA5CCDED_gt_InitAllowingUnits, true, false);
    TriggerExecute(libBA5CCDED_gt_InitTech, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_Init_Init () {
    libBA5CCDED_gt_Init = TriggerCreate("libBA5CCDED_gt_Init_Func");
    TriggerAddEventMapInit(libBA5CCDED_gt_Init);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init...ACV Multibuild
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_InitACVMultibuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_BA5CCDED_3BD21F4E"), true);
    Wait(2.0, c_timeGame);
    if ((TechTreeUpgradeCount(1, "MicroFusionReactor", c_techCountCompleteOnly) == 1)) {
        TechTreeAbilityAllow(1, AbilityCommand("AdvancedConstruction", 1), true);
        TechTreeAbilityAllow(1, AbilityCommand("AdvancedConstruction", 0), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_InitACVMultibuild_Init () {
    libBA5CCDED_gt_InitACVMultibuild = TriggerCreate("libBA5CCDED_gt_InitACVMultibuild_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init...Allowing Units
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_InitAllowingUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_BA5CCDED_49305883"), true);
    if ((TechTreeUpgradeCount(1, "NaniteEmitter", c_techCountCompleteOnly) == 1)) {
        TechTreeUnitAllow(1, "NaniteCloudEmitter", true);
        TechTreeUnitAllow(1, "NaniteCloudEmitterBurrowed", true);
    }
    else {
        TechTreeUnitAllow(1, "NaniteCloudEmitter", false);
        TechTreeUnitAllow(1, "NaniteCloudEmitterBurrowed", false);
    }
    if ((TechTreeUnitIsAllowed(1, "Bunker") == true)) {
        TechTreeUnitAllow(1, "BunkerBurrowed", true);
    }

    if ((TechTreeUnitIsAllowed(1, "SCV") == true)) {
        TechTreeUnitAllow(1, "ACV", true);
    }

    if ((TechTreeUnitIsAllowed(1, "Marine") == true)) {
        TechTreeUnitAllow(1, "WarPig", true);
        TechTreeAbilityAllow(1, AbilityCommand("BarracksTrain", 8), true);
    }

    if ((TechTreeUnitIsAllowed(1, "Marauder") == true)) {
        TechTreeUnitAllow(1, "HammerSecurity", true);
        TechTreeAbilityAllow(1, AbilityCommand("BarracksTrain", 11), true);
    }

    if ((TechTreeUnitIsAllowed(1, "Medic") == true)) {
        TechTreeUnitAllow(1, "MercMedic", true);
        TechTreeAbilityAllow(1, AbilityCommand("BarracksTrain", 12), true);
    }

    if ((TechTreeUnitIsAllowed(1, "Firebat") == true)) {
        TechTreeUnitAllow(1, "DevilDog", true);
        TechTreeAbilityAllow(1, AbilityCommand("BarracksTrain", 13), true);
    }

    if ((TechTreeUnitIsAllowed(1, "Reaper") == true)) {
        TechTreeUnitAllow(1, "BlockB", true);
        TechTreeAbilityAllow(1, AbilityCommand("BarracksTrain", 9), true);
    }

    if ((TechTreeUnitIsAllowed(1, "Ghost") == true) && (TechTreeUnitIsAllowed(1, "GhostAcademy") == true)) {
        TechTreeUnitAllow(1, "Phantom", true);
        TechTreeAbilityAllow(1, AbilityCommand("BarracksTrain", 10), true);
    }
    else {
        TechTreeUnitAllow(1, "Phantom", false);
        TechTreeAbilityAllow(1, AbilityCommand("BarracksTrain", 10), false);
    }
    if ((TechTreeUnitIsAllowed(1, "Spectre") == true) && (TechTreeUnitIsAllowed(1, "GhostAcademy") == true)) {
        TechTreeUnitAllow(1, "Shadow", true);
        TechTreeAbilityAllow(1, AbilityCommand("BarracksTrain", 14), true);
    }
    else {
        TechTreeUnitAllow(1, "Shadow", false);
        TechTreeAbilityAllow(1, AbilityCommand("BarracksTrain", 14), false);
    }

    if ((TechTreeUnitIsAllowed(1, "Hellion") == true)) {
        TechTreeUnitAllow(1, "Agitator", true);
        TechTreeUnitAllow(1, "Anarchist", true);
        TechTreeAbilityAllow(1, AbilityCommand("FactoryTrain", 13), true);
        TechTreeAbilityAllow(1, AbilityCommand("FactoryTrain", 14), true);
    }

    if (((TechTreeUnitIsAllowed(1, "SiegeTank") == true) || (TechTreeUnitIsAllowed(1, "SiegeTankSieged") == true))) {
        TechTreeUnitAllow(1, "SiegeBreakerSieged", true);
        TechTreeUnitAllow(1, "SiegeBreaker", true);
        TechTreeAbilityAllow(1, AbilityCommand("FactoryTrain", 11), true);
    }

    if ((TechTreeUnitIsAllowed(1, "Goliath") == true)) {
        TechTreeUnitAllow(1, "SpartanCompany", true);
        TechTreeAbilityAllow(1, AbilityCommand("FactoryTrain", 15), true);
    }

    if (((TechTreeUnitIsAllowed(1, "Thor") == true) || (TechTreeUnitIsAllowed(1, "ThorAP") == true))) {
        TechTreeUnitAllow(1, "Titan", true);
        TechTreeAbilityAllow(1, AbilityCommand("FactoryTrain", 12), true);
    }

    if ((TechTreeUnitIsAllowed(1, "Vulture") == true)) {
        TechTreeUnitAllow(1, "Condor", true);
        TechTreeAbilityAllow(1, AbilityCommand("FactoryTrain", 17), true);
    }

    if ((TechTreeUnitIsAllowed(1, "Diamondback") == true)) {
        TechTreeUnitAllow(1, "Copperhead", true);
        TechTreeAbilityAllow(1, AbilityCommand("FactoryTrain", 16), true);
    }

    if (((TechTreeUnitIsAllowed(1, "VikingAssault") == true) || (TechTreeUnitIsAllowed(1, "VikingFighter") == true))) {
        TechTreeUnitAllow(1, "HelsAngelAssault", true);
        TechTreeUnitAllow(1, "HelsAngelFighter", true);
        TechTreeAbilityAllow(1, AbilityCommand("StarportTrain", 12), true);
    }

    if ((TechTreeUnitIsAllowed(1, "Banshee") == true)) {
        TechTreeUnitAllow(1, "DuskWing", true);
        TechTreeAbilityAllow(1, AbilityCommand("StarportTrain", 10), true);
    }

    if ((TechTreeUnitIsAllowed(1, "Medivac") == true)) {
        TechTreeUnitAllow(1, "CharonDropship", true);
        TechTreeAbilityAllow(1, AbilityCommand("StarportTrain", 9), true);
    }

    if ((TechTreeUnitIsAllowed(1, "Harrier") == true)) {
        TechTreeUnitAllow(1, "Harrier", true);
        TechTreeAbilityAllow(1, AbilityCommand("StarportTrain", 13), true);
    }

    if ((TechTreeUnitIsAllowed(1, "Battlecruiser") == true)) {
        TechTreeUnitAllow(1, "Starcruiser", true);
        TechTreeAbilityAllow(1, AbilityCommand("StarportTrain", 11), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_InitAllowingUnits_Init () {
    libBA5CCDED_gt_InitAllowingUnits = TriggerCreate("libBA5CCDED_gt_InitAllowingUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init...Merc Edition Upgrade
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_InitMercEditionUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_BA5CCDED_6D5A7B80"), true);
    TechTreeUpgradeAddLevel(1, "MercEdition", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_InitMercEditionUpgrade_Init () {
    libBA5CCDED_gt_InitMercEditionUpgrade = TriggerCreate("libBA5CCDED_gt_InitMercEditionUpgrade_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init...Passive Upgrades
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_InitPassiveUpgrades_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_BA5CCDED_37EA2574"), true);
    TechTreeUpgradeAddLevel(1, "LaserTargetingSystem", 1);
    TechTreeUpgradeAddLevel(1, "ImpalerRoundsShadow", 1);
    TechTreeUpgradeAddLevel(1, "AdvancedSiegeTechArmorOnly", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_InitPassiveUpgrades_Init () {
    libBA5CCDED_gt_InitPassiveUpgrades = TriggerCreate("libBA5CCDED_gt_InitPassiveUpgrades_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init...Unit Replace
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_InitUnitReplace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5694256B_g;
    int auto5694256B_u;
    unit auto5694256B_var;
    string autoF1BE7618_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_BA5CCDED_C69916B1"), true);
    auto5694256B_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32))), 0);
    auto5694256B_u = UnitGroupCount(auto5694256B_g, c_unitCountAll);
    for (;; auto5694256B_u -= 1) {
        auto5694256B_var = UnitGroupUnitFromEnd(auto5694256B_g, auto5694256B_u);
        if (auto5694256B_var == null) { break; }
        autoF1BE7618_val = UnitGetType(auto5694256B_var);
        if (autoF1BE7618_val == "SCV") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "ACV", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Marine") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "WarPig", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Marauder") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "HammerSecurity", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Medic") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "MercMedic", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Reaper") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "BlockB", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Firebat") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "DevilDog", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Ghost") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Phantom", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Spectre") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Shadow", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "HellionTank") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Anarchist", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Hellion") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Agitator", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "SiegeTankSieged") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "SiegeBreakerSieged", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "SiegeTank") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "SiegeBreaker", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Thor") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Titan", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "ThorAP") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Titan", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Vulture") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Condor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Diamondback") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Copperhead", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Goliath") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "SpartanCompany", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "VikingAssault") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "HelsAngelAssault", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "VikingFighter") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "HelsAngelFighter", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Banshee") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "DuskWing", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Wraith") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Harrier", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Raven") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Nomad", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Hercules") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "ZeusLanderFlying", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "ScienceVessel") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Adjudicator", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Battlecruiser") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "Starcruiser", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (autoF1BE7618_val == "Medivac") {
            libNtve_gf_ReplaceUnit(auto5694256B_var, "CharonDropship", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_InitUnitReplace_Init () {
    libBA5CCDED_gt_InitUnitReplace = TriggerCreate("libBA5CCDED_gt_InitUnitReplace_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init...Tech
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_InitTech_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_BA5CCDED_810267DE"), true);
    if (((TechTreeUpgradeCount(1, "OrbitalDeployment", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(1, "OrbitalStrike", c_techCountCompleteOnly) == 1))) {
        TechTreeUpgradeAddLevel(1, "OrbitalStrike", 1);
        TechTreeUpgradeAddLevel(1, "OrbitalDeployment", 1);
    }

    if (((TechTreeUpgradeCount(1, "SupremeReactor", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(1, "TechReactor", c_techCountCompleteOnly) == 1))) {
        TechTreeUpgradeAddLevel(1, "TechReactor", 1);
        TechTreeUpgradeAddLevel(1, "SupremeReactor", 1);
    }

    if (((TechTreeUpgradeCount(1, "RefittedReactor", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(1, "CommandCenterReactor", c_techCountCompleteOnly) == 1))) {
        TechTreeUpgradeAddLevel(1, "CommandCenterReactor", 1);
        TechTreeUpgradeAddLevel(1, "RefittedReactor", 1);
    }

    if (((TechTreeUpgradeCount(1, "VanadiumPlating", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(1, "Gen1Plating", c_techCountCompleteOnly) == 1))) {
        TechTreeUpgradeAddLevel(1, "Gen1Plating", 1);
        TechTreeUpgradeAddLevel(1, "VanadiumPlating", 1);
    }

    if (((TechTreeUpgradeCount(1, "PlusUltraCapacitors", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(1, "UltraCapacitors", c_techCountCompleteOnly) == 1))) {
        TechTreeUpgradeAddLevel(1, "PlusUltraCapacitors", 1);
        TechTreeUpgradeAddLevel(1, "UltraCapacitors", 1);
    }

    if (((TechTreeUpgradeCount(1, "OrbitalBaseDepots", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(1, "SupplyDepotDrop", c_techCountCompleteOnly) == 1))) {
        TechTreeUpgradeAddLevel(1, "SupplyDepotDrop", 1);
        TechTreeUpgradeAddLevel(1, "OrbitalBaseDepots", 1);
        PlayerModifyPropertyInt(1, c_playerPropSuppliesMade, c_playerPropOperAdd, 100);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_InitTech_Init () {
    libBA5CCDED_gt_InitTech = TriggerCreate("libBA5CCDED_gt_InitTech_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mission Directives
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_MissionDirectives_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto8C0CF512_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto8C0CF512_val = libCamp_gf_CurrentMap();
    if (auto8C0CF512_val == libCamp_ge_MapID_MapTRaynor01) {
        libDAB75013_gf_ServicesEmailShow(StringToText("The Mod"), StringExternal("Param/Value/lib_BA5CCDED_DCEB3273"), 17);
        libDAB75013_gf_ServicesEmailShow(StringToText("Backwater Station Marshal"), StringExternal("Param/Value/lib_BA5CCDED_1CF99CDA"), 17);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTRaynor02) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Tychus"), StringExternal("Param/Value/lib_BA5CCDED_BB200BEC"), 17);
        libBA5CCDED_gf_SpawnZeusonGameStart(null);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTRaynor03) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Tychus"), StringExternal("Param/Value/lib_BA5CCDED_7E66DF80"), 17);
        libBA5CCDED_gf_SpawnZeusonGameStart(null);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTHanson01) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Black Market Contact"), StringExternal("Param/Value/lib_BA5CCDED_56622040"), 17);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTHanson02) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Matt"), StringExternal("Param/Value/lib_BA5CCDED_C37996DF"), 17);
        libBA5CCDED_gf_SpawnZeusonGameStart(null);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTHanson03A) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Tychus"), StringExternal("Param/Value/lib_BA5CCDED_D145D045"), 17);
        libBA5CCDED_gf_SpawnZeusonGameStart(null);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTHanson03B) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Tychus"), StringExternal("Param/Value/lib_BA5CCDED_F6524727"), 17);
        libBA5CCDED_gf_SpawnZeusonGameStart(null);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTTosh01) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Black Market Contact"), StringExternal("Param/Value/lib_BA5CCDED_96C22D7E"), 17);
        libBA5CCDED_gf_SpawnZeusonGameStart(null);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTTosh02) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Black Market Contact"), StringExternal("Param/Value/lib_BA5CCDED_AD91334D"), 17);
        libBA5CCDED_gf_SpawnZeusonGameStart(null);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTTosh03A) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Tychus"), StringExternal("Param/Value/lib_BA5CCDED_8E1FE6F6"), 17);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTTosh03B) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Tychus"), StringExternal("Param/Value/lib_BA5CCDED_8D8AC7C4"), 17);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTZeratul01) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Internal Monologue"), StringExternal("Param/Value/lib_BA5CCDED_C854498D"), 17);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTZeratul02) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Internal Monologue"), StringExternal("Param/Value/lib_BA5CCDED_D79C03A6"), 17);
        libBA5CCDED_gf_SpawnZeusonGameStart(null);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTZeratul03) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Internal Monologue"), StringExternal("Param/Value/lib_BA5CCDED_092773E4"), 17);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTZeratul04) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Internal Monologue"), StringExternal("Param/Value/lib_BA5CCDED_9944095B"), 17);
        libBA5CCDED_gf_SpawnZeusonGameStart(null);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTValerian01) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Tychus"), StringExternal("Param/Value/lib_BA5CCDED_49433A65"), 17);
        libBA5CCDED_gf_SpawnZeusonGameStart(null);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTValerian02A) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Tychus"), StringExternal("Param/Value/lib_BA5CCDED_2626FAB7"), 17);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTValerian02B) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Tychus"), StringExternal("Param/Value/lib_BA5CCDED_7739C6CF"), 17);
        libBA5CCDED_gf_SpawnZeusonGameStart(null);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTTychus01) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Terrran Oceanic Research Group"), StringExternal("Param/Value/lib_BA5CCDED_DDE1D7AD"), 17);
        libBA5CCDED_gf_SpawnZeusonGameStart(null);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTTychus02) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Black Market Contact"), StringExternal("Param/Value/lib_BA5CCDED_A7360F0B"), 17);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTTychus03) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Tychus"), StringExternal("Param/Value/lib_BA5CCDED_3A3BE184"), 17);
        libBA5CCDED_gf_SpawnZeusonGameStart(null);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTTychus04) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Tychus"), StringExternal("Param/Value/lib_BA5CCDED_FFD64A4A"), 17);
        libBA5CCDED_gf_SpawnZeusonGameStart(null);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTTychus05) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Black Market Contact"), StringExternal("Param/Value/lib_BA5CCDED_242B25A5"), 17);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTHorner01) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Black Market Contact"), StringExternal("Param/Value/lib_BA5CCDED_EB59D18A"), 17);
        libBA5CCDED_gf_SpawnZeusonGameStart(null);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTHorner02) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Matt"), StringExternal("Param/Value/lib_BA5CCDED_1C426745"), 17);
        libBA5CCDED_gf_SpawnZeusonGameStart(null);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTHorner03) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Matt"), StringExternal("Param/Value/lib_BA5CCDED_0EE12A7B"), 17);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTHorner04) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Matt"), StringExternal("Param/Value/lib_BA5CCDED_B26B743D"), 17);
    }
    else if (auto8C0CF512_val == libCamp_ge_MapID_MapTHorner05S) {
        libDAB75013_gf_ServicesEmailShow(StringToText("Matt"), StringExternal("Param/Value/lib_BA5CCDED_B5698139"), 17);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_MissionDirectives_Init () {
    libBA5CCDED_gt_MissionDirectives = TriggerCreate("libBA5CCDED_gt_MissionDirectives_Func");
    TriggerAddEventTimeElapsed(libBA5CCDED_gt_MissionDirectives, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deposit Money
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_DepositMoney_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto885A3E0A_g;
    int auto885A3E0A_u;
    unit auto885A3E0A_var;
    unitgroup auto8320E49D_g;
    int auto8320E49D_u;
    unit auto8320E49D_var;

    // Conditions
    if (testConds) {
        if (!((libCamp_gf_CurrentMap() != libCamp_ge_MapID_MapTTosh01))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto885A3E0A_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto885A3E0A_u = UnitGroupCount(auto885A3E0A_g, c_unitCountAll);
    for (;; auto885A3E0A_u -= 1) {
        auto885A3E0A_var = UnitGroupUnitFromEnd(auto885A3E0A_g, auto885A3E0A_u);
        if (auto885A3E0A_var == null) { break; }
        UnitSetPropertyFixed(auto885A3E0A_var, c_unitPropResources, 5000.0);
    }
    auto8320E49D_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8320E49D_u = UnitGroupCount(auto8320E49D_g, c_unitCountAll);
    for (;; auto8320E49D_u -= 1) {
        auto8320E49D_var = UnitGroupUnitFromEnd(auto8320E49D_g, auto8320E49D_u);
        if (auto8320E49D_var == null) { break; }
        UnitSetPropertyFixed(auto8320E49D_var, c_unitPropResources, 5000.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_DepositMoney_Init () {
    libBA5CCDED_gt_DepositMoney = TriggerCreate("libBA5CCDED_gt_DepositMoney_Func");
    TriggerAddEventTimeElapsed(libBA5CCDED_gt_DepositMoney, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg/Terran Generic Difficulty
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_ZergTerranGenericDifficulty_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_waveUnits;

    // Automatic Variable Declarations
    string auto87A898D5_val;
    unitgroup auto29DBC890_g;
    int auto29DBC890_u;
    unit auto29DBC890_var;
    int auto273D7741_val;
    string auto290AA580_val;
    unitgroup auto8E0861CC_g;
    int auto8E0861CC_u;
    unit auto8E0861CC_var;
    int autoB33BC9E2_val;

    // Variable Initialization
    lv_waveUnits = AIWaveGetUnits(EventPlayerWave());

    // Conditions
    if (testConds) {
        if (!((libBA5CCDED_gv_myWave == false))) {
            return false;
        }

        if (!(((PlayerRace(EventPlayer()) == "Terr") || (PlayerRace(EventPlayer()) == "Zerg")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIWaveDelete(EventPlayerWave());
    auto87A898D5_val = PlayerRace(EventPlayer());
    if (auto87A898D5_val == "Terr") {
        auto29DBC890_g = lv_waveUnits;
        auto29DBC890_u = UnitGroupCount(auto29DBC890_g, c_unitCountAll);
        for (;; auto29DBC890_u -= 1) {
            auto29DBC890_var = UnitGroupUnitFromEnd(auto29DBC890_g, auto29DBC890_u);
            if (auto29DBC890_var == null) { break; }
            auto273D7741_val = RandomInt(1, 3);
            if (auto273D7741_val == 1) {
                auto290AA580_val = UnitGetType(auto29DBC890_var);
                if (auto290AA580_val == "SCV") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "ACV", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "Marine") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "WarPig", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "Marauder") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "HammerSecurity", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "Medic") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "MercMedic", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "Reaper") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "BlockB", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "Firebat") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "DevilDog", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "Ghost") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "Phantom", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "Spectre") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "Shadow", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "HellionTank") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "Anarchist", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "Hellion") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "Agitator", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "SiegeTankSieged") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "SiegeBreakerSieged", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "SiegeTank") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "SiegeBreaker", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "Thor") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "Titan", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "ThorAP") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "Titan", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "Vulture") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "Condor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "Diamondback") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "Copperhead", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "Goliath") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "SpartanCompany", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "VikingAssault") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "HelsAngelAssault", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "VikingFighter") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "HelsAngelFighter", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "Banshee") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "DuskWing", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "Wraith") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "Harrier", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "Raven") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "Nomad", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "Medivac") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "CharonDropship", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "Hercules") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "ZeusLanderFlying", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "Battlecruiser") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "Starcruiser", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else if (auto290AA580_val == "ScienceVessel") {
                    libNtve_gf_ReplaceUnit(auto29DBC890_var, "Adjudicator", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else {
                }
                UnitGroupAdd(lv_waveUnits, libNtve_gf_LastReplacedUnit());
            }
            else {
            }
        }
    }
    else if (auto87A898D5_val == "Zerg") {
        auto8E0861CC_g = lv_waveUnits;
        auto8E0861CC_u = UnitGroupCount(auto8E0861CC_g, c_unitCountAll);
        for (;; auto8E0861CC_u -= 1) {
            auto8E0861CC_var = UnitGroupUnitFromEnd(auto8E0861CC_g, auto8E0861CC_u);
            if (auto8E0861CC_var == null) { break; }
            autoB33BC9E2_val = RandomInt(1, 3);
            if (autoB33BC9E2_val == 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(auto8E0861CC_var), 0, UnitGetOwner(auto8E0861CC_var), UnitGetPosition(auto8E0861CC_var));
                UnitGroupAdd(lv_waveUnits, UnitLastCreated());
            }
            else {
            }
        }
    }
    else {
    }
    libBA5CCDED_gv_myWave = true;
    AIAttackWaveUseGroup(EventPlayer(), lv_waveUnits);
    AIAttackWaveSend(EventPlayer(), 0, false);
    Wait(2.0, c_timeGame);
    libBA5CCDED_gv_myWave = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_ZergTerranGenericDifficulty_Init () {
    libBA5CCDED_gt_ZergTerranGenericDifficulty = TriggerCreate("libBA5CCDED_gt_ZergTerranGenericDifficulty_Func");
    TriggerEnable(libBA5CCDED_gt_ZergTerranGenericDifficulty, false);
    TriggerAddEventPlayerAIWave(libBA5CCDED_gt_ZergTerranGenericDifficulty, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Generic Difficulty
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_ProtossGenericDifficulty_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto335F5B49_g;
    int auto335F5B49_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto335F5B49_g = PlayerGroupAll();
    auto335F5B49_var = -1;
    while (true) {
        auto335F5B49_var = PlayerGroupNextPlayer(auto335F5B49_g, auto335F5B49_var);
        if (auto335F5B49_var < 0) { break; }
        if ((PlayerRace(auto335F5B49_var) == "Prot")) {
            TechTreeUpgradeAddLevel(1, "SOAQuatro", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_ProtossGenericDifficulty_Init () {
    libBA5CCDED_gt_ProtossGenericDifficulty = TriggerCreate("libBA5CCDED_gt_ProtossGenericDifficulty_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Redline Reactor
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_RedlineReactor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libBA5CCDED_gv_easterEggActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rng = RandomInt(1, 100);
    if ((lv_rng <= 3)) {
        libBA5CCDED_gv_easterEggActive = true;
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RedlineReactor", 1);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RedlineReactorEasterEgg", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
        SoundPlayForPlayer(SoundLink("RedlineReactorMusicEasterEgg", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(12.0, c_timeReal);
        libBA5CCDED_gv_easterEggActive = false;
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RedlineReactorEasterEgg", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_RedlineReactor_Init () {
    libBA5CCDED_gt_RedlineReactor = TriggerCreate("libBA5CCDED_gt_RedlineReactor_Func");
    TriggerAddEventPlayerEffectUsed(libBA5CCDED_gt_RedlineReactor, c_playerAny, "RedlineReactorAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Freyja
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_Freyja_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libBA5CCDED_gv_easterEggActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rng = RandomInt(1, 100);
    if ((lv_rng <= 3)) {
        libBA5CCDED_gv_easterEggActive = true;
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "Hellraiser", 1);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "HellraiserEasterEgg", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
        SoundPlayForPlayer(SoundLink("FreyjaHellraiserMusicEasterEgg", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(10.0, c_timeReal);
        libBA5CCDED_gv_easterEggActive = false;
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "HellraiserEasterEgg", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_Freyja_Init () {
    libBA5CCDED_gt_Freyja = TriggerCreate("libBA5CCDED_gt_Freyja_Func");
    TriggerAddEventPlayerEffectUsed(libBA5CCDED_gt_Freyja, c_playerAny, "HellraiserApplyBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nomad Mine Drone Spawner
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_NomadMineDroneSpawner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_NomadMineDroneSpawner_Init () {
    libBA5CCDED_gt_NomadMineDroneSpawner = TriggerCreate("libBA5CCDED_gt_NomadMineDroneSpawner_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spartan Company Shell Shower Full
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_SpartanCompanyShellShowerFull_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventUnit(), "ShellShower") == 12))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "SpartanCompanyShellShowerFull", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_SpartanCompanyShellShowerFull_Init () {
    libBA5CCDED_gt_SpartanCompanyShellShowerFull = TriggerCreate("libBA5CCDED_gt_SpartanCompanyShellShowerFull_Func");
    TriggerAddEventUnitBehaviorChange(libBA5CCDED_gt_SpartanCompanyShellShowerFull, null, "ShellShower", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Siege Breaker Graduating Range
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_SiegeBreakerGraduatingRange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(1, "SmartServosMKIV", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "GraduatingRangeController", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_SiegeBreakerGraduatingRange_Init () {
    libBA5CCDED_gt_SiegeBreakerGraduatingRange = TriggerCreate("libBA5CCDED_gt_SiegeBreakerGraduatingRange_Func");
    TriggerAddEventUnitAbility(libBA5CCDED_gt_SiegeBreakerGraduatingRange, null, AbilityCommand("SiegeBreakerSiege", 0), c_abilMorphStageAbilsEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Skibi's Angel Repair Drone
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_SkibisAngelRepairDrone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "AIEnhancement", c_techCountCompleteOnly) == 1)) {
        UnitAbilityAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SkibisAngelRepairDrone");
    }
    else {
        if ((GameIsTestMap(false) == false)) {
            TriggerEnable(TriggerGetCurrent(), false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_SkibisAngelRepairDrone_Init () {
    libBA5CCDED_gt_SkibisAngelRepairDrone = TriggerCreate("libBA5CCDED_gt_SkibisAngelRepairDrone_Func");
    TriggerAddEventPlayerEffectUsed(libBA5CCDED_gt_SkibisAngelRepairDrone, c_playerAny, "SkibisAngelSpawnDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hel's Angel Tactical Realignment
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_HelsAngelTacticalRealignment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("TacticalRealignment", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_HelsAngelTacticalRealignment_Init () {
    libBA5CCDED_gt_HelsAngelTacticalRealignment = TriggerCreate("libBA5CCDED_gt_HelsAngelTacticalRealignment_Func");
    TriggerAddEventUnitAbility(libBA5CCDED_gt_HelsAngelTacticalRealignment, null, AbilityCommand("WreckingCrewAssaultMode", 0), c_abilMorphStageStatsEnd, false);
    TriggerAddEventUnitAbility(libBA5CCDED_gt_HelsAngelTacticalRealignment, null, AbilityCommand("WreckingCrewFighterMode", 0), c_abilMorphStageStatsEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Harrier Recall
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_HarrierRecall_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RevivalFieldCooldown") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RevivalFieldCooldown", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    UnitSetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster), UnitGetPosition(UnitGroupClosestToPoint(UnitGroup("Starport", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)))), false);
    UnitAbilitySpendExplicit(EventPlayerEffectUsedUnit(c_effectUnitCaster), AbilityCommand("RevivalField", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
    Wait(0.1, c_timeReal);
    UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitCaster), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_HarrierRecall_Init () {
    libBA5CCDED_gt_HarrierRecall = TriggerCreate("libBA5CCDED_gt_HarrierRecall_Func");
    TriggerAddEventPlayerEffectUsed(libBA5CCDED_gt_HarrierRecall, c_playerAny, "HarrierRecall");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Harrier Force Missiles
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_HarrierForceMissiles_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogUnit, "HERCGrappleDummy", "Name", 0, "<c val=\"ff0000\">Frank</c>");
    CatalogFieldValueSet(c_gameCatalogActor, "HERCGrappleDummy", "HighlightTooltip", 0, "<c val=\"ff0000\">Frank</c>");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_HarrierForceMissiles_Init () {
    libBA5CCDED_gt_HarrierForceMissiles = TriggerCreate("libBA5CCDED_gt_HarrierForceMissiles_Func");
    TriggerAddEventMapInit(libBA5CCDED_gt_HarrierForceMissiles);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nomad Silent Mode Height Up
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_NomadSilentModeHeightUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), (UnitGetHeight(EventUnit()) + 1.5), 1.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_NomadSilentModeHeightUp_Init () {
    libBA5CCDED_gt_NomadSilentModeHeightUp = TriggerCreate("libBA5CCDED_gt_NomadSilentModeHeightUp_Func");
    TriggerAddEventUnitBehaviorChange(libBA5CCDED_gt_NomadSilentModeHeightUp, null, "NomadSilentMode", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nomad Silent Mode Height Down
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_NomadSilentModeHeightDown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), (UnitGetHeight(EventUnit()) - 1.5), 1.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_NomadSilentModeHeightDown_Init () {
    libBA5CCDED_gt_NomadSilentModeHeightDown = TriggerCreate("libBA5CCDED_gt_NomadSilentModeHeightDown_Func");
    TriggerAddEventUnitBehaviorChange(libBA5CCDED_gt_NomadSilentModeHeightDown, null, "NomadSilentMode", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Samson(Zeus) Injection Pods
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_SamsonZeusInjectionPods_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "ZeusLanderFlying") || (UnitGetType(EventUnit()) == "ZeusLanderLanded")))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(EventPlayer(), "ApolloInjectionPods", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnitCargo(), "SurvivorsGuiltApolloApplyBehavior", EventUnitCargo());
    UnitBehaviorAdd(EventUnitCargo(), "SurvivorsGuiltApolloCD", EventUnitCargo(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_SamsonZeusInjectionPods_Init () {
    libBA5CCDED_gt_SamsonZeusInjectionPods = TriggerCreate("libBA5CCDED_gt_SamsonZeusInjectionPods_Func");
    TriggerAddEventUnitCargo(libBA5CCDED_gt_SamsonZeusInjectionPods, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nanite Emitter Burrow
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_NaniteEmitterBurrow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroupAlliance(EventPlayer(), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitCaster), Order(AbilityCommand("NaniteCloudEmitterBurrow", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_NaniteEmitterBurrow_Init () {
    libBA5CCDED_gt_NaniteEmitterBurrow = TriggerCreate("libBA5CCDED_gt_NaniteEmitterBurrow_Func");
    TriggerAddEventPlayerEffectUsed(libBA5CCDED_gt_NaniteEmitterBurrow, c_playerAny, "NaniteTurretBurrowOrder");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Skibis Angels Cleansing
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_gt_SkibisAngelsCleansing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_units;
    unitgroup lv_medics;

    // Automatic Variable Declarations
    unitgroup autoCF5BA87A_g;
    int autoCF5BA87A_u;
    unit autoCF5BA87A_var;
    int autoC68F45B2_val;
    unitgroup auto5FC5A150_g;
    int auto5FC5A150_u;
    unit auto5FC5A150_var;
    unitgroup auto55F7CF94_g;
    int auto55F7CF94_u;
    unit auto55F7CF94_var;
    unitgroup auto5BCEBEB2_g;
    int auto5BCEBEB2_u;
    unit auto5BCEBEB2_var;
    unitgroup auto999EC3A8_g;
    int auto999EC3A8_u;
    unit auto999EC3A8_var;

    // Variable Initialization
    lv_units = UnitGroupSelected(EventPlayer());
    lv_medics = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCF5BA87A_g = lv_units;
    autoCF5BA87A_u = UnitGroupCount(autoCF5BA87A_g, c_unitCountAll);
    for (;; autoCF5BA87A_u -= 1) {
        autoCF5BA87A_var = UnitGroupUnitFromEnd(autoCF5BA87A_g, autoCF5BA87A_u);
        if (autoCF5BA87A_var == null) { break; }
        if ((UnitGetType(autoCF5BA87A_var) == "SkibisAngel")) {
            UnitGroupAdd(lv_medics, autoCF5BA87A_var);
        }

    }
    if ((UnitGroupCount(lv_medics, c_unitCountAlive) < 4)) {
        return true;
    }

    autoC68F45B2_val = libCamp_gf_CurrentMap();
    if (autoC68F45B2_val == libCamp_ge_MapID_MapTHanson02) {
        auto5FC5A150_g = UnitGroup("CommandCenter", c_playerAny, RegionCircle(UnitGroupCenterOfGroup(lv_medics), 3.0), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5FC5A150_u = UnitGroupCount(auto5FC5A150_g, c_unitCountAll);
        for (;; auto5FC5A150_u -= 1) {
            auto5FC5A150_var = UnitGroupUnitFromEnd(auto5FC5A150_g, auto5FC5A150_u);
            if (auto5FC5A150_var == null) { break; }
            auto55F7CF94_g = UnitGroup("SkibisAngel", c_playerAny, RegionCircle(UnitGroupCenterOfGroup(lv_medics), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 4);
            auto55F7CF94_u = UnitGroupCount(auto55F7CF94_g, c_unitCountAll);
            for (;; auto55F7CF94_u -= 1) {
                auto55F7CF94_var = UnitGroupUnitFromEnd(auto55F7CF94_g, auto55F7CF94_u);
                if (auto55F7CF94_var == null) { break; }
                UnitBehaviorAddPlayer(auto55F7CF94_var, "SkibiCleanseStun", 1, 1);
            }
            Wait(90.0, c_timeGame);
            UnitBehaviorRemove(auto5FC5A150_var, "ColonyInfestation", 1);
        }
    }
    else if (autoC68F45B2_val == libCamp_ge_MapID_MapTValerian02B) {
        auto5BCEBEB2_g = UnitGroup("CollapsibleTerranTower", c_playerAny, RegionCircle(UnitGroupCenterOfGroup(lv_medics), 3.0), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5BCEBEB2_u = UnitGroupCount(auto5BCEBEB2_g, c_unitCountAll);
        for (;; auto5BCEBEB2_u -= 1) {
            auto5BCEBEB2_var = UnitGroupUnitFromEnd(auto5BCEBEB2_g, auto5BCEBEB2_u);
            if (auto5BCEBEB2_var == null) { break; }
            auto999EC3A8_g = UnitGroup("SkibisAngel", c_playerAny, RegionCircle(UnitGroupCenterOfGroup(lv_medics), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 4);
            auto999EC3A8_u = UnitGroupCount(auto999EC3A8_g, c_unitCountAll);
            for (;; auto999EC3A8_u -= 1) {
                auto999EC3A8_var = UnitGroupUnitFromEnd(auto999EC3A8_g, auto999EC3A8_u);
                if (auto999EC3A8_var == null) { break; }
                UnitBehaviorAddPlayer(auto999EC3A8_var, "SkibiCleanseStun", 1, 1);
            }
            Wait(90.0, c_timeGame);
            UnitBehaviorRemove(auto5BCEBEB2_var, "ColonyInfestation", 1);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBA5CCDED_gt_SkibisAngelsCleansing_Init () {
    libBA5CCDED_gt_SkibisAngelsCleansing = TriggerCreate("libBA5CCDED_gt_SkibisAngelsCleansing_Func");
    TriggerAddEventButtonPressed(libBA5CCDED_gt_SkibisAngelsCleansing, c_playerAny, "Cleanse");
}

void libBA5CCDED_InitTriggers () {
    libBA5CCDED_gt_OpenBanks_Init();
    libBA5CCDED_gt_SaveBanks_Init();
    libBA5CCDED_gt_ListenforChat_Init();
    libBA5CCDED_gt_Init_Init();
    libBA5CCDED_gt_InitACVMultibuild_Init();
    libBA5CCDED_gt_InitAllowingUnits_Init();
    libBA5CCDED_gt_InitMercEditionUpgrade_Init();
    libBA5CCDED_gt_InitPassiveUpgrades_Init();
    libBA5CCDED_gt_InitUnitReplace_Init();
    libBA5CCDED_gt_InitTech_Init();
    libBA5CCDED_gt_MissionDirectives_Init();
    libBA5CCDED_gt_DepositMoney_Init();
    libBA5CCDED_gt_ZergTerranGenericDifficulty_Init();
    libBA5CCDED_gt_ProtossGenericDifficulty_Init();
    libBA5CCDED_gt_RedlineReactor_Init();
    libBA5CCDED_gt_Freyja_Init();
    libBA5CCDED_gt_NomadMineDroneSpawner_Init();
    libBA5CCDED_gt_SpartanCompanyShellShowerFull_Init();
    libBA5CCDED_gt_SiegeBreakerGraduatingRange_Init();
    libBA5CCDED_gt_SkibisAngelRepairDrone_Init();
    libBA5CCDED_gt_HelsAngelTacticalRealignment_Init();
    libBA5CCDED_gt_HarrierRecall_Init();
    libBA5CCDED_gt_HarrierForceMissiles_Init();
    libBA5CCDED_gt_NomadSilentModeHeightUp_Init();
    libBA5CCDED_gt_NomadSilentModeHeightDown_Init();
    libBA5CCDED_gt_SamsonZeusInjectionPods_Init();
    libBA5CCDED_gt_NaniteEmitterBurrow_Init();
    libBA5CCDED_gt_SkibisAngelsCleansing_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libBA5CCDED_InitLib_completed = false;

void libBA5CCDED_InitLib () {
    if (libBA5CCDED_InitLib_completed) {
        return;
    }

    libBA5CCDED_InitLib_completed = true;

    libBA5CCDED_InitLibraries();
    libBA5CCDED_InitVariables();
    libBA5CCDED_InitTriggers();
}

